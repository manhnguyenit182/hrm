// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/db/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Employees {
  id            String       @id @default(cuid()) // pk
  firstName     String?
  lastName      String?
  departmentId  String?
  department    Departments? @relation(fields: [departmentId], references: [id]) // fk
  positionId    String?
  position      Positions?   @relation(fields: [positionId], references: [id])
  jobId         String?
  job           Jobs?        @relation(fields: [jobId], references: [id])
  type          String?
  status        String?
  phone         String?
  email         String       @unique
  address       String?
  city          String?
  image         String?
  state         String?
  gender        String?
  birthday      DateTime?
  maritalStatus String?
  nationality   String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  Attendance Attendance[]
  User       User?
}

model Departments {
  id        String   @id @default(cuid())
  name      String?
  location  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Employees Employees[]

  Jobs Jobs[]
}

model Positions {
  id          String   @id @default(cuid())
  title       String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Employees Employees[]
}

model Attendance {
  id         String    @id @default(cuid())
  employeeId String?
  date       DateTime  @default(now())
  clockIn    DateTime?
  clockOut   DateTime?
  status     String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  employee Employees? @relation(fields: [employeeId], references: [id])
}

model Jobs {
  id           String       @id @default(cuid())
  job          String?
  departmentId String?
  department   Departments? @relation(fields: [departmentId], references: [id])
  type         String?
  salary       Float?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  status       String?
  Employees    Employees[]
}

model User {
  id        String  @id @default(cuid())
  email     String  @unique
  password  String
  firstName String?
  lastName  String?

  employeeId String?    @unique
  employee   Employees? @relation(fields: [employeeId], references: [id])
  role       String? // e.g., 'admin', 'user'
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@map("users") // Map to the "users" table in the database
}
